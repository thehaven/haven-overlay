diff --git a/plugin/x/protocol/plugin/encoder_file_output.h b/plugin/x/protocol/plugin/encoder_file_output.h
index 0c42382e..ef9da93d 100644
--- a/plugin/x/protocol/plugin/encoder_file_output.h
+++ b/plugin/x/protocol/plugin/encoder_file_output.h
@@ -79,7 +79,7 @@ class Encoder_file_output : public File_output {
       return;

     write_to_context(context, "");
-    write_to_context(context, "struct ", message->name(), " {");
+    write_to_context(context, "struct ", std::string(message->name()), " {");

     if (message->options().HasExtension(Mysqlx::server_message_id)) {
       const auto server_id_numeric = static_cast<int>(
@@ -97,7 +97,7 @@ class Encoder_file_output : public File_output {
       bool is_reserved = false;
       const auto field = message->field(i);
       const auto field_tag = std::to_string(field->number());
-      const auto field_name = get_cpp_field_name(field->name(), &is_reserved);
+      const auto field_name = get_cpp_field_name(std::string(field->name()), &is_reserved);
 
       if (is_reserved) {
         write_to_context(context,
@@ -129,7 +129,7 @@ class Encoder_file_output : public File_output {
 
       // Check if we there is a message containing Server message ID
       if (0 == m_used_message_ids.count(enum_value->number())) {
-        std::string value = "  " + enum_value->name() + " = " +
+        std::string value = "  " + std::string(enum_value->name()) + " = " +
                             std::to_string(enum_value->number());
 
         values.push_back(value);

diff --git a/plugin/x/protocol/plugin/message_field_chain.cc b/plugin/x/protocol/plugin/message_field_chain.cc
index 7b897cc..408e51a 100644
--- a/plugin/x/protocol/plugin/message_field_chain.cc
+++ b/plugin/x/protocol/plugin/message_field_chain.cc
@@ -58,7 +58,7 @@ bool Message_field_chain::begin_validate_field(const FieldDescriptor *field,

   // Check against cycles in Message dependencies graph
   const bool was_node_visited =
-      message && 0 != m_types_done.count(message->full_name());
+      message && 0 != m_types_done.count(std::string(message->full_name()));

   if (nullptr == message || was_node_visited || 0 == message->field_count()) {
     m_output_file->append_chain(m_context, chain);
@@ -67,14 +67,14 @@ bool Message_field_chain::begin_validate_field(const FieldDescriptor *field,
   }

   m_chain = chain;
-  m_types_done.emplace(message->full_name());
+  m_types_done.emplace(std::string(message->full_name()));

   return true;
 }

 void Message_field_chain::end_validate_field(const FieldDescriptor *field,
                                              const Descriptor *message) {
-  m_types_done.erase(message->full_name());
+  m_types_done.erase(std::string(message->full_name()));
   const auto position = m_chain.find_last_of(".");

   if (std::string::npos != position) m_chain.resize(position);

diff --git a/plugin/x/protocol/plugin/messages_used_by_server.cc b/plugin/x/protocol/plugin/messages_used_by_server.cc
index fac8444..cafa4ce 100644
--- a/plugin/x/protocol/plugin/messages_used_by_server.cc
+++ b/plugin/x/protocol/plugin/messages_used_by_server.cc
@@ -49,20 +49,20 @@ bool Messages_used_by_server::begin_validate_field(const FieldDescriptor *field,
     const auto &message_options = message->options();

     if (!message_options.HasExtension(Mysqlx::server_message_id)) {
-      if (0 == m_forced_packages.count(message->file()->package()))
+      if (0 == m_forced_packages.count(std::string(message->file()->package())))
         return false;
     }
   }

   // Check against cycles in Message dependencies graph
   const bool was_node_visited =
-      message && 0 != m_types_done.count(message->full_name());
+      message && 0 != m_types_done.count(std::string(message->full_name()));

   if (nullptr == message || was_node_visited) {
     return false;
   }

-  m_types_done.emplace(message->full_name());
+  m_types_done.emplace(std::string(message->full_name()));
   m_output_file->append_message(m_context, message);

   return true;
diff --git a/plugin/x/tests/driver/connector/session_holder.cc b/plugin/x/tests/driver/connector/session_holder.cc
index ab21d8e7..d40e3983 100644
--- a/plugin/x/tests/driver/connector/session_holder.cc
+++ b/plugin/x/tests/driver/connector/session_holder.cc
@@ -355,23 +355,23 @@ xcl::Handler_result Session_holder::count_received_messages(
     const xcl::XProtocol::Message &msg) {
   const auto protobuf_message_name = msg.GetDescriptor()->full_name();
   const auto server_message_name =
-      Mysqlx::ServerMessages::descriptor()->full_name();
+      std::string(Mysqlx::ServerMessages::descriptor()->full_name());
   const bool is_empty_message = (protobuf_message_name == server_message_name);
-  const std::string &msg_name = !is_empty_message
-                                    ? msg.GetDescriptor()->full_name()
+  const std::string msg_name = !is_empty_message
+                                    ? std::string(msg.GetDescriptor()->full_name())
                                     : server_msgs_by_id[msg_id].second;
 
   ++m_received_msg_counters[msg_name];
 
-  if (msg_name != Mysqlx::Notice::Frame::descriptor()->full_name())
+  if (msg_name != std::string(Mysqlx::Notice::Frame::descriptor()->full_name()))
     return xcl::Handler_result::Continue;
 
   static const std::array<std::string, 5> k_notice_type_id = {
-      Mysqlx::Notice::Warning::descriptor()->full_name(),
-      Mysqlx::Notice::SessionVariableChanged::descriptor()->full_name(),
-      Mysqlx::Notice::SessionStateChanged::descriptor()->full_name(),
-      Mysqlx::Notice::GroupReplicationStateChanged::descriptor()->full_name(),
-      Mysqlx::Notice::ServerHello::descriptor()->full_name(),
+      std::string(Mysqlx::Notice::Warning::descriptor()->full_name()),
+      std::string(Mysqlx::Notice::SessionVariableChanged::descriptor()->full_name()),
+      std::string(Mysqlx::Notice::SessionStateChanged::descriptor()->full_name()),
+      std::string(Mysqlx::Notice::GroupReplicationStateChanged::descriptor()->full_name()),
+      std::string(Mysqlx::Notice::ServerHello::descriptor()->full_name()),
   };
 
   const auto notice_type =
