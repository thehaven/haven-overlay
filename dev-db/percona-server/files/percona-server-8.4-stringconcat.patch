diff --git a/plugin/x/client/xprotocol_impl.cc b/plugin/x/client/xprotocol_impl.cc
index 3b35af1..96f37c7 100644
--- a/plugin/x/client/xprotocol_impl.cc
+++ b/plugin/x/client/xprotocol_impl.cc
@@ -782,8 +782,8 @@ std::unique_ptr<XProtocol::Message> Protocol_impl::deserialize_message(
   DBUG_LOG("debug", "Deserialize message: " << ret_val->GetTypeName());
   if (!ret_val->ParseFromCodedStream(input_stream)) {
     std::string error_message(ERR_MSG_MESSAGE_NOT_INITIALIZED);
-    error_message += "Name:" + ret_val->GetTypeName() + ", ";
-    error_message += ret_val->InitializationErrorString();
+    error_message += "Name:" + std::string(ret_val->GetTypeName()) + ", ";
+    error_message += std::string(ret_val->InitializationErrorString());
     *out_error = XError(CR_MALFORMED_PACKET, error_message);
 
     // Check if whole frame was parsed, if not then
@@ -816,8 +816,8 @@ std::unique_ptr<XProtocol::Message> Protocol_impl::deserialize_received_message(
 
   if (!ret_val->IsInitialized()) {
     std::string err(ERR_MSG_MESSAGE_NOT_INITIALIZED);
-    err += "Name:" + ret_val->GetTypeName() + ", ";
-    err += ret_val->InitializationErrorString();
+    err += "Name:" + std::string(ret_val->GetTypeName()) + ", ";
+    err += std::string(ret_val->InitializationErrorString());
     *out_error = XError(CR_MALFORMED_PACKET, err);
 
     return {};
@@ -1122,8 +1122,8 @@ XProtocol::Message *Protocol_impl::recv_message_with_header(
 
     if (!m_compressed.ParseFromCodedStream(&cis)) {
       std::string error_message(ERR_MSG_MESSAGE_NOT_INITIALIZED);
-      error_message += "Name:" + m_compressed.GetTypeName() + ", ";
-      error_message += m_compressed.InitializationErrorString();
+      error_message += "Name:" + std::string(m_compressed.GetTypeName()) + ", ";
+      error_message += std::string(m_compressed.InitializationErrorString());
       *out_error = XError(CR_MALFORMED_PACKET, error_message);
       return nullptr;
     }
diff --git a/plugin/x/tests/driver/formatters/message_formatter.cc b/plugin/x/tests/driver/formatters/message_formatter.cc
index 201765a..73f8175 100644
--- a/plugin/x/tests/driver/formatters/message_formatter.cc
+++ b/plugin/x/tests/driver/formatters/message_formatter.cc
@@ -176,7 +176,7 @@ static std::string message_to_text(const std::string &binary_message) {
   message.ParseFromString(binary_message);
   google::protobuf::TextFormat::PrintToString(message, &result);
 
-  return message.GetDescriptor()->full_name() + " { " + result + " }";
+  return std::string(message.GetDescriptor()->full_name()) + " { " + result + " }";
 }
 
 static std::string messages_field_to_text(const Message &message,
@@ -313,7 +313,7 @@ std::string message_to_text(const Message &message) {
     printer.PrintToString(message, &output);
   }
 
-  return message.GetDescriptor()->full_name() + " {\n" + output + "}\n";
+  return std::string(message.GetDescriptor()->full_name()) + " {\n" + output + "}\n";
 }
 
 /**
@@ -348,7 +348,7 @@ std::string message_to_text(const Message &message,
         std::find_if(output.begin(), output.end(), expected_field);
 
     if (output.end() == i) {
-      throw std::logic_error("Message '" + msg->GetDescriptor()->full_name() +
+      throw std::logic_error("Message '" + std::string(msg->GetDescriptor()->full_name()) +
                              "' doesn't contains field '" +
                              expected_field.m_name +
                              "'"
@@ -405,7 +405,7 @@ std::string message_to_text(const Message &message,
   std::string prefix = "";
 
   if (show_message_name)
-    prefix = message.GetDescriptor()->full_name() + "(" + field_path + ") = ";
+    prefix = std::string(message.GetDescriptor()->full_name()) + "(" + field_path + ") = ";
 
   if (!field_descriptor->is_repeated())
     return prefix + messages_field_to_text(*msg, field_descriptor);
diff --git a/plugin/x/tests/driver/processor/commands/command.cc b/plugin/x/tests/driver/processor/commands/command.cc
index 90efcbf..dac0b2b 100644
--- a/plugin/x/tests/driver/processor/commands/command.cc
+++ b/plugin/x/tests/driver/processor/commands/command.cc
@@ -248,7 +248,7 @@ bool Command::is_command_registred(const std::string &command_line,
 
   if (out_is_single_line_command) *out_is_single_line_command = has_prefix;
 
-  if (has_prefix) command_name_start += CMD_PREFIX.length();
+  if (has_prefix) command_name_start += std::string(CMD_PREFIX.length());
 
   const auto command_name_end = std::find_if(
       command_line.begin(), command_line.end(), [](const char element) -> bool {
@@ -275,7 +275,7 @@ Command::Result Command::process(std::istream &input,
 
   const char *arguments = command_line.c_str() + out_command_name.length();
 
-  if (out_has_prefix) arguments += CMD_PREFIX.length();
+  if (out_has_prefix) arguments += std::string(CMD_PREFIX.length());
   if (' ' == *arguments) arguments++;
 
   context->print_verbose("Execute ", command_line, "\n");
diff --git a/plugin/x/protocol/plugin/message_field_chain.cc b/plugin/x/protocol/plugin/message_field_chain.cc
index 7b897ccd..9ecc5049 100644
--- a/plugin/x/protocol/plugin/message_field_chain.cc
+++ b/plugin/x/protocol/plugin/message_field_chain.cc
@@ -58,7 +58,7 @@ bool Message_field_chain::begin_validate_field(const FieldDescriptor *field,
 
   // Check against cycles in Message dependencies graph
   const bool was_node_visited =
-      message && 0 != m_types_done.count(message->full_name());
+      message && 0 != m_types_done.count(std::string(message->full_name()));
 
   if (nullptr == message || was_node_visited || 0 == message->field_count()) {
     m_output_file->append_chain(m_context, chain);
diff --git a/plugin/x/protocol/plugin/message_field_chain.cc b/plugin/x/protocol/plugin/message_field_chain.cc
index 9ecc504..6e639b9 100644
--- a/plugin/x/protocol/plugin/message_field_chain.cc
+++ b/plugin/x/protocol/plugin/message_field_chain.cc
@@ -74,7 +74,7 @@ bool Message_field_chain::begin_validate_field(const FieldDescriptor *field,
 
 void Message_field_chain::end_validate_field(const FieldDescriptor *field,
                                              const Descriptor *message) {
-  m_types_done.erase(message->full_name());
+  m_types_done.erase(std::string(message->full_name()));
   const auto position = m_chain.find_last_of(".");
 
   if (std::string::npos != position) m_chain.resize(position);
diff --git a/plugin/x/protocol/plugin/encoder_file_output.h b/plugin/x/protocol/plugin/encoder_file_output.h
index 0c42382..f0d823c 100644
--- a/plugin/x/protocol/plugin/encoder_file_output.h
+++ b/plugin/x/protocol/plugin/encoder_file_output.h
@@ -79,7 +79,7 @@ class Encoder_file_output : public File_output {
       return;
 
     write_to_context(context, "");
-    write_to_context(context, "struct ", message->name(), " {");
+    write_to_context(context, "struct ", std::string(message->name()), " {");
 
     if (message->options().HasExtension(Mysqlx::server_message_id)) {
       const auto server_id_numeric = static_cast<int>(
@@ -97,7 +97,7 @@ class Encoder_file_output : public File_output {
       bool is_reserved = false;
       const auto field = message->field(i);
       const auto field_tag = std::to_string(field->number());
-      const auto field_name = get_cpp_field_name(field->name(), &is_reserved);
+      const auto field_name = get_cpp_field_name(std::string(field->name()), &is_reserved);
 
       if (is_reserved) {
         write_to_context(context,
@@ -129,7 +129,7 @@ class Encoder_file_output : public File_output {
 
       // Check if we there is a message containing Server message ID
       if (0 == m_used_message_ids.count(enum_value->number())) {
-        std::string value = "  " + enum_value->name() + " = " +
+        std::string value = "  " + std::string(enum_value->name()) + " = " +
                             std::to_string(enum_value->number());
 
         values.push_back(value);
diff --git a/plugin/x/protocol/plugin/messages_used_by_server.cc b/plugin/x/protocol/plugin/messages_used_by_server.cc
index fac8444..672df41 100644
--- a/plugin/x/protocol/plugin/messages_used_by_server.cc
+++ b/plugin/x/protocol/plugin/messages_used_by_server.cc
@@ -49,14 +49,14 @@ bool Messages_used_by_server::begin_validate_field(const FieldDescriptor *field,
     const auto &message_options = message->options();
 
     if (!message_options.HasExtension(Mysqlx::server_message_id)) {
-      if (0 == m_forced_packages.count(message->file()->package()))
+      if (0 == m_forced_packages.count(std::string(message->file()->package())))
         return false;
     }
   }
 
   // Check against cycles in Message dependencies graph
   const bool was_node_visited =
-      message && 0 != m_types_done.count(message->full_name());
+      message && 0 != m_types_done.count(std::string(message->full_name()));
 
   if (nullptr == message || was_node_visited) {
     return false;
diff --git a/plugin/x/tests/driver/formatters/message_formatter.cc b/plugin/x/tests/driver/formatters/message_formatter.cc
index 73f8175..bff8d59 100644
--- a/plugin/x/tests/driver/formatters/message_formatter.cc
+++ b/plugin/x/tests/driver/formatters/message_formatter.cc
@@ -206,7 +206,7 @@ static std::string messages_field_to_text(const Message &message,
       return xpl::to_string(reflection->GetBool(message, fd));
 
     case FieldDescriptor::CPPTYPE_ENUM:
-      return reflection->GetEnum(message, fd)->name();
+      return std::string(reflection->GetEnum(message, fd)->name());
 
     case FieldDescriptor::CPPTYPE_STRING:
       return reflection->GetString(message, fd);
@@ -247,7 +247,7 @@ static std::string messages_repeated_field_to_text(const Message &message,
       return xpl::to_string(reflection->GetRepeatedBool(message, fd, index));
 
     case FieldDescriptor::CPPTYPE_ENUM:
-      return reflection->GetRepeatedEnum(message, fd, index)->name();
+      return std::string(reflection->GetRepeatedEnum(message, fd, index)->name());
 
     case FieldDescriptor::CPPTYPE_STRING:
       return reflection->GetRepeatedString(message, fd, index);
