Subject: mark busy sd majors as allocated
From: <ohering@suse.de>
Patch-mainline: never , triggers only with our xenlinux drivers
References: bnc#744658

Mark busy sd majors as allocated, so that sd_probe() can not register
them again.  Since register_blkdev() can be called from everywhere,
init_sd() has to handle errors and mark the major as busy in its
internal mapping.

The specific case where the errors happen is the xenblk driver in PV and
FV guests. A guest can claim IDE or SCSI majors if they are specified in
its configuration file. Then xenblk will claim the major numbers and
start to use them. Later a user of sd_mod (such as iscsi or scsi_debug)
will try to claim these majors as well, but does not handle the error
from register_blkdev(). As a result the kernel devicename is registered
twice with sysfs and the kernel crashes.

This patch implements simple error handling and marks the first 256
minors for a failed major as busy. It also handle holes.
The xend tools do not handle extended minors (such as
/sys/block/sdiw/dev:8:256), so this change can remain simple.

---
 drivers/scsi/sd.c |   72 ++++++++++++++++++++++++++++++++++++++++++++++--------
 1 file changed, 62 insertions(+), 10 deletions(-)

Index: b/drivers/scsi/sd.c
===================================================================
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@ -2546,6 +2546,20 @@ static void sd_probe_async(void *data, a
 	put_device(&sdkp->dev);
 }
 
+static int sd_get_index(int *index)
+{
+	int error = -ENOMEM;
+	do {
+		if (!ida_pre_get(&sd_index_ida, GFP_KERNEL))
+			break;
+
+		spin_lock(&sd_index_lock);
+		error = ida_get_new(&sd_index_ida, index);
+		spin_unlock(&sd_index_lock);
+	} while (error == -EAGAIN);
+
+	return error;
+}
 /**
  *	sd_probe - called during driver initialization and whenever a
  *	new scsi device is attached to the system. It is called once
@@ -2588,15 +2602,7 @@ static int sd_probe(struct device *dev)
 	if (!gd)
 		goto out_free;
 
-	do {
-		if (!ida_pre_get(&sd_index_ida, GFP_KERNEL))
-			goto out_put;
-
-		spin_lock(&sd_index_lock);
-		error = ida_get_new(&sd_index_ida, &index);
-		spin_unlock(&sd_index_lock);
-	} while (error == -EAGAIN);
-
+	error = sd_get_index(&index);
 	if (error) {
 		sdev_printk(KERN_WARNING, sdp, "sd_probe: memory exhausted.\n");
 		goto out_put;
@@ -2806,6 +2812,42 @@ done:
 	return ret;
 }
 
+/*
+* Each major represents 16 disks. A minor is used for the disk itself and 15
+* partitions. Mark each disk busy so that sd_probe can not reclaim this major.
+*/
+static int __init init_sd_ida(int *error)
+{
+	int *index, i, j, err;
+
+	index = kmalloc(SD_MAJORS * (256 / SD_MINORS) * sizeof(int), GFP_KERNEL);
+	if (!index)
+		return -ENOMEM;
+
+	/* Mark minors for all majors as busy */
+	for (i = 0; i < SD_MAJORS; i++)
+	{
+		for (j = 0; j < (256 / SD_MINORS); j++) {
+			err = sd_get_index(&index[i * (256 / SD_MINORS) + j]);
+			if (err) {
+				kfree(index);
+				return err;
+			}
+		}
+	}
+
+	/* Mark minors for claimed majors as free */
+	for (i = 0; i < SD_MAJORS; i++)
+	{
+		if (error[i])
+			continue;
+		for (j = 0; j < (256 / SD_MINORS); j++)
+			ida_remove(&sd_index_ida, index[i * (256 / SD_MINORS) + j]);
+	}
+	kfree(index);
+	return 0;
+}
+
 /**
  *	init_sd - entry point for this driver (both when built in or when
  *	a module).
@@ -2815,16 +2857,26 @@ done:
 static int __init init_sd(void)
 {
 	int majors = 0, i, err;
+	int error[SD_MAJORS];
 
 	SCSI_LOG_HLQUEUE(3, printk("init_sd: sd driver entry point\n"));
 
 	for (i = 0; i < SD_MAJORS; i++)
-		if (register_blkdev(sd_major(i), "sd") == 0)
+	{
+		error[i] = register_blkdev(sd_major(i), "sd");
+		if (error[i] == 0)
 			majors++;
+	}
 
 	if (!majors)
 		return -ENODEV;
 
+	if (majors < SD_MAJORS) {
+		err = init_sd_ida(error);
+		if (err)
+			return err;
+	}
+
 	err = class_register(&sd_disk_class);
 	if (err)
 		goto err_out;
